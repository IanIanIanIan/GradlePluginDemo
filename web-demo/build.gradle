apply plugin: 'com.android.application'
android {
    compileSdkVersion compileVer
    buildToolsVersion buildVer
    defaultConfig {
        applicationId "interprocess.uis.com.web_demo"
        minSdkVersion minVer
        targetSdkVersion targetVer
        versionCode 1
        versionName "1.0"
        /*manifestPlaceholders = [
                applicationId:"interprocess.uis.com.web_demo"
        ]*/
    }
    dataBinding{
        enabled = true
    }
    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}
tasks.whenTaskAdded {
    if (it.name.contains("AndroidTest") || it.name.contains("Lint")
            || it.name.contains("UnitTest")) {
        it.enabled = false
    }
}
repositories {
    flatDir {
        dirs 'libs'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:'+supportVer
    compile 'com.tencent.sonic:sdk:3.0.0'
    compile(name: 'WebLib-1.1.3', ext: 'aar')
}

apply plugin: 'com.uis.methodtimer'
methodTimer{
    exclude 'interprocess.uis.com.web_demo.PermissionProxy'
    isMain false
    enableJar true
    enableLog true
    timeout 50
}

//apply plugin: 'com.uis.methodinject'
apply plugin: 'com.jakewharton.butterknife'

task("regTask").doLast {
    def patten = "android.support.compat.R\$attr.class"
    def reg = ".*\\.[A-Z]{0,1}R.{0,1}|.*\\.R.{0,1}\\\$.*|.*\\.BuildConfig\"".toString()
    println(patten.matches(reg))
    reg = "\\.class"
    def reg1 = "\\\\"
    println("result="+patten.replaceAll(reg,"").replaceAll(reg1,"."))

}

class TimingsListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println result.action+"#Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}


}

//gradle.addListener new TimingsListener()


